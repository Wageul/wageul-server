name: production Deploy
on:
  push:
    branches:
      - main
env:
  DOCKERHUB_USERNAME: ywonchae1
  DOCKERHUB_IMAGE_NAME: wageul79

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    environment: PROD
    strategy:
      matrix:
        java-version: [ 21 ]
        distribution: [ 'temurin' ]

    steps:
      # 기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # JDK를 21 버전으로 세팅
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '21'

      # 환경변수 적용
      - name: Set environment variables
        run: |
          echo "GOOGLE_AUTH_CODE=${{ secrets.GOOGLE_AUTH_CODE }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "GOOGLE_REDIRECT_URL=${{ secrets.GOOGLE_REDIRECT_URL }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "PSQL_PASSWORD=${{ secrets.PSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "PSQL_URL=${{ secrets.PSQL_URL }}" >> $GITHUB_ENV
          echo "PSQL_USERNAME=${{ secrets.PSQL_USERNAME }}" >> $GITHUB_ENV

      # Gradlew 실행 허용
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew

      # Gradle 빌드
      - name: Build with Gradle
        id: gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            build
            --scan
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      # Dockerhub 로그인
      - name: Login to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      # Docker 메타데이터 추출
      - name: Extract Docker metadata
        id: metadata
        uses: docker/metadata-action@v5.5.0
        env:
          DOCKERHUB_IMAGE_FULL_NAME: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_IMAGE_NAME }}
        with:
          images: ${{ env.DOCKERHUB_IMAGE_FULL_NAME }}
          tags:
            ${{ github.run_number }}
          flavor: |
            latest=false

      # Docker 이미지 빌드 및 도커허브로 푸시
      - name: Docker Build and Push
        uses: docker/build-push-action@v6.0.1
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}

      # 서버로 docker-compose 파일 전송
      - name: Copy docker-compose file to EC2
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -avzr --delete
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_PRIVATE_KEY }}
          path: docker-compose.yaml
          remote_path: /home/${{ secrets.EC2_USERNAME }}/

      # EC2로 배포
      - name: Deploy to EC2 Server
        uses: appleboy/ssh-action@master
        env:
          IMAGE_FULL_URL: ${{ steps.metadata.outputs.tags }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          envs: IMAGE_FULL_URL, DOCKERHUB_IMAGE_NAME # docker-compose.yml 에서 사용할 환경 변수
          script: |
            echo "${{ secrets.DOCKERHUB_ACCESS_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
            docker compose up --build -d
            docker image prune -a -f