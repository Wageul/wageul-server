package com.wageul.wageul_server.mock;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.wageul.wageul_server.review.domain.Review;
import com.wageul.wageul_server.review.service.port.ReviewRepository;
import com.wageul.wageul_server.user.domain.User;

public class FakeReviewRepository implements ReviewRepository {

	private Long autoGeneratedId = 0L;
	private final List<Review> data = new ArrayList<>();

	@Override
	public Review save(Review review) {
		if(review.getId() == null || review.getId() == 0) {
			Review newReview = Review.builder()
				.id(++autoGeneratedId)
				.writer(review.getWriter())
				.target(review.getTarget())
				.content(review.getContent())
				.rate(review.getRate())
				.createdAt(LocalDateTime.now())
				.updatedAt(LocalDateTime.now())
				.build();
			data.add(newReview);
			return newReview;
		} else {
			data.removeIf(item -> item.getId().equals(review.getId()));
			data.add(review);
			return review;
		}
	}

	@Override
	public Optional<Review> findById(Long reviewId) {
		return data.stream().filter(item -> item.getId().equals(reviewId)).findAny();
	}

	@Override
	public void delete(Review review) {
		data.removeIf(item -> item.equals(review));
	}

	@Override
	public List<Review> findByTargetId(long userId) {
		return data.stream().filter(item -> item.getTarget().getId() == userId).toList();
	}

	@Override
	public List<Review> findByTarget(User target) {
		return data.stream().filter(item -> item.getTarget().equals(target)).toList();
	}
}
